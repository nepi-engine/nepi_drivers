#[[
Copyright (c) 2024 Numurus, LLC <https://www.numurus.com>.

This file is part of nepi-engine
(see https://github.com/nepi-engine).

License: 3-clause BSD, see https://opensource.org/licenses/BSD-3-Clause
]]
cmake_minimum_required(VERSION 2.8.3)
project(nepi_drivers)

## Compile as C++11, supported in ROS Kinetic and newer
add_compile_options(-std=c++11)

## Use the verbose version of make
set(CMAKE_VERBOSE_MAKEFILE TRUE)

# Following relies (sometimes, e.g., Jetpack-installed OpenCV) on a symlink from /usr/share/OpenCV to
# true OpenCV cmake folder (e.g., usr/lib/aarch64-linux-gnu/cmake/opencv4 on Jetson)
set(OpenCV_DIR /usr/share/OpenCV)

find_package(catkin REQUIRED
    COMPONENTS std_msgs sensor_msgs nepi_sdk nepi_api nepi_sdk_interfaces cv_bridge OpenCV  serial pcl_ros pcl_conversions tf2_ros )

find_package(PkgConfig)

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs  # Or other packages containing msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
	CATKIN_DEPENDS sensor_msgs nepi_sdk_interfaces nepi_sdk
)

###########
## Build ##
###########




#############
## Install ##
#############

catkin_install_python(PROGRAMS
  scripts/fake_gps.py
  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)


## Mark other files for installation (e.g. launch and bag files, etc.)
set( NEPI_DRIVERS_SHARE_FOLDER 
  # Must hard-coded 
  /opt/nepi/ros/lib/nepi_drivers
)

install(DIRECTORY idx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER} 
  FILES_MATCHING PATTERN "*.py"
)

install(DIRECTORY idx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER} 
  FILES_MATCHING PATTERN "*.yaml"
)

install(DIRECTORY lsx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.py"
)

install(DIRECTORY lsx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.yaml"
)

install(DIRECTORY ptx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.py"
)

install(DIRECTORY ptx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.yaml"
)

install(DIRECTORY rbx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.py"
)

install(DIRECTORY rbx_drivers/
  DESTINATION ${NEPI_DRIVERS_SHARE_FOLDER}  
  FILES_MATCHING PATTERN "*.yaml"
)


#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_nepi_sdk.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
